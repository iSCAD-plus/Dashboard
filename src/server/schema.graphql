
type Mutation {
  createDecision(decision: DecisionInput): Decision,
  createCCRR(row: CCRRInput): CrossCuttingResearchRow,
  createMandate(mandate: MandateInput): Mandate
}

type Query {
  getDecisions(regime: String): [Decision],
  countDecisions: Int,
  countCCRR(table: String): Int,
  countMandates: Int,
  decisionQuery(regime: String): [DecisionQueryResult]
}

input DecisionInput {
  decision: String!,
  regime: String!,
  year: Int!,
  date: DateTime!,
  numParagraphs: Int!,
  decisionType: String!,
  measures: [MeasureInput]
}

input MeasureInput {
  measureType: String,
  measureCategory: String
}

input CCRRInput {
  table: String!,
  symbol: String!,
  category: String!,
  agendaItem: String!,
  statementType: String!,
  paragraphId: String!,
  provision: String!,
  keywords: [String]
}

input MandateInput {
  name: String!,
  location: String,
  originalDecision: String!,
  subsequentDecisions: [String],
  latestDecision: String,
  expiration: DateTime,
  currentLength: String!,
  leadEntity: String!,
  chapterVII: Boolean!,
  authorizationOfUseOfForce: MandateComponentInput,
  mandateComponents: [MandateComponentInput]
}

input MandateComponentInput {
  component: String!,
  subcomponent: String,
  resolutions: String,
  excerpt: String
}

type Decision {
  decision: String,
  regime: String,
  year: Int,
  date: DateTime,
  numParagraphs: Int,
  decisionType: String,
  measures: [Measure]
}

type DecisionQueryResult {
  regime: String,
  year: Int,
  month: Int,
  numParagraphs: Int,
  decisionType: String,
  measureType: String,
  measureCategory: String,
  count: Int
}

type Measure {
  measureType: String,
  measureCategory: String
}

scalar DateTime

type CrossCuttingResearchRow {
  table: String,
  symbol: String,
  category: String,
  agendaItem: String,
  statementType: String,
  paragraphId: String,
  provision: String,
  keywords: [String]
}

type Mandate {
  name: String,
  location: String,
  decisions: [String],
  expiration: DateTime,
  currentLength: String,
  leadEntity: String,
  mandateComponents: [MandateComponent]
}

type MandateComponent {
  component: String,
  subcomponent: String,
  excerpt: String
}

