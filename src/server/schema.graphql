
type Mutation {
  createDecision(decision: DecisionInput): Decision
  createCCRR(row: CCRRInput): CrossCuttingResearchRow
  createMandate(mandate: MandateInput): Mandate
  createPlot(
    name: String!
    query: String!
    x: String!
    y: String!
    seriesKey: String
  ): Plot
}

# Perform queries against the underlying data in MongoDB.
type Query {
  # retrieve a list of datasets for visualization along with
  # their data requirements stored as a graphql query
  getPlots: [Plot]

  # retrieve a list of decisions in the database
  getDecisions(
    # filter by the provided regime
    regime: String
  ): [Decision]

  # the total count of decisions in the database
  countDecisions: Int

  # count how many rows are in the cross cutting research table
  countCCRR(
    # if specified, counts within the given table. can be "wps", "caac", or "poc".
    table: String
  ): Int

  # count how many rows are in the mandates collection
  countMandates: Int

  # performs an aggregate query on the `decisions` collection by forming a
  # MongoDB query dynamically.
  #
  # Note that the keys you specify to retrieve will alter what query gets run.
  # See the `DecisionQueryResult` documentation for more details.
  decisionQuery(
    # if specified, restricts the query to a specific regime
    regime: String
  ): [DecisionQueryResult]
}

input DecisionInput {
  decision: String!
  regime: String!
  year: Int!
  date: DateTime!
  numParagraphs: Int!
  decisionType: String!
  measures: [MeasureInput]
}

input MeasureInput {
  measureType: String
  measureCategory: String
}

input CCRRInput {
  table: String!
  symbol: String!
  category: String!
  agendaItem: String!
  statementType: String!
  paragraphId: String!
  provision: String!
  keywords: [String]
}

input MandateInput {
  name: String!
  location: String
  originalDecision: String!
  subsequentDecisions: [String]
  latestDecision: String
  expiration: DateTime
  currentLength: String!
  leadEntity: String!
  chapterVII: Boolean!
  authorizationOfUseOfForce: MandateComponentInput
  mandateComponents: [MandateComponentInput]
}

input MandateComponentInput {
  component: String!
  subcomponent: String
  resolutions: String
  excerpt: String
}

type Decision {
  decision: String
  regime: String
  year: Int
  date: DateTime
  numParagraphs: Int
  decisionType: String
  measures: [Measure]
}

# Result of a query against the `decisions` collection involving some form
# of aggregation.
type DecisionQueryResult {
  regime: String,
  year: Int,
  month: Int,
  numParagraphs: Int,
  decisionType: String,

  # including this field in the selection set will unwind the collection
  measureType: String,

  # including this field in the selection set will unwind the collection
  measureCategory: String,

  # including this field in selection set groups the selected documents by the other keys in the selection set and resolves as a count of those groups
  count: Int
}

type Measure {
  measureType: String
  measureCategory: String
}

scalar DateTime

type CrossCuttingResearchRow {
  table: String
  symbol: String
  category: String
  agendaItem: String
  statementType: String
  paragraphId: String
  provision: String
  keywords: [String]
}

type Mandate {
  name: String
  location: String
  decisions: [String]
  expiration: DateTime
  currentLength: String
  leadEntity: String
  mandateComponents: [MandateComponent]
}

type MandateComponent {
  component: String
  subcomponent: String
  excerpt: String
}

type Axis {
  x: String!
  y: String!
  seriesKey: String
}

type Plot {
  name: String!
  query: String!
  axis: Axis!
}
